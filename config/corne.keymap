/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&caps_word{
    continue-list=<UNDERSCORE BACKSPACE>;
};
 
/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LAYERS";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&to 1>, <&to 2>;
        };
        ht0: caps_word_ralt {
            compatible = "zmk,behavior-hold-tap";
            label = "caps_word_ralt";
            #binding-cells = <2>;
            flavor="tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_word>;
        };   
        mbsdel: backsp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "backsp_del";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DEL>;
            mods = <(RIGHT_CONTROL|MOD_LALT)>;
        };
    };
        combos {
        compatible = "zmk,combos";
        combo_bt_clr {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&bt BT_CLR>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };
        combo_unlock {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&studio_unlock>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };
        combo_dota {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&to 3>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };
           combo_bt_1 {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&bt BT_SEL 0>;
            require-prior-idle-ms = <100>;
            layers = <0 1 2>;
           };     
            combo_bt_2 {
            timeout-ms = <50>;
            key-positions = <7 8>;
            require-prior-idle-ms = <100>;
            bindings = <&bt BT_SEL 1>;
            layers = <0 1 2 >;
           }; 
            combo_bt_3 {
            timeout-ms = <50>;
            key-positions = <5 6>;
            require-prior-idle-ms = <100>;
            bindings = <&bt BT_SEL 2>;
            layers = <0 1 2 >;
           };
            combo_to_3 {
            timeout-ms = <50>;
            key-positions = <37 40>;
            bindings = <&to 3>;
            require-prior-idle-ms = <100>;
            layers = <0 1 2>;
           }; 
            combo_to_0 {
            timeout-ms = <25>;
            key-positions = <38 39>;
            require-prior-idle-ms = <100>;
            bindings = <&to 0>;
            layers = <1 2 3>;
           }; 
            combo_to_4 {
            timeout-ms = <25>;
            key-positions = <1 2 3>;
            bindings = <&to 4>;
            require-prior-idle-ms = <100>;
            layers = <0>;
           }; 
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
    &kp TAB     &kp Q       &kp W       &kp E       &kp R       &kp T       &kp Y       &kp U       &kp I     &kp O     &kp P       &mbsdel
    &to 0       &lt 1 A     &kp S       &kp D       &kp F       &lt 2 G     &kp H       &kp J       &kp K     &kp L     &lt 1 SEMI  &kp SQT
    &td0        &kp Z       &kp X       &kp C       &kp V       &kp B       &kp N       &kp M       &kp COMMA &kp DOT   &kp FSLH    &kp ESC
                            &kp LGUI    &kp RIGHT_CONTROL   &kp RET     &kp SPACE   &kp LEFT_SHIFT   &ht0 RALT 0
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |@q     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
    &trans      &kp PRINTSCREEN     &kp BSLH        &kp ASTERISK      &kp PERCENT       &kp DOT            &kp MINUS   &kp N7   &kp N8 &lt 3 N9    &none &trans
    &trans      &none               &kp AT          &kp CARET         &kp DOLLAR        &kp HASH           &kp N0      &kp N4   &kp N5 &kp N6      &none &none
    &trans      &none               &kp AMPERSAND   &kp TILDE         &kp PIPE          &kp EXCLAMATION    &kp DOT     &kp N1   &kp N2 &kp N3      &none &none
                                    &trans          &trans            &trans            &trans             &trans      &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  (  |  )  |  *  | BKSP |
// | CTRL |     |     |     |     |     |   |  _  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  -  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
    &trans     &kp F4       &kp AT          &kp UP_ARROW    &kp DLLR            &kp PRCNT   &kp CARET       &kp AMPS  &kp LPAR        &kp RPAR   &kp ASTERISK &trans 
    &trans     &kp TILDE    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW     &trans      &kp UNDERSCORE  &kp EQUAL &kp LBKT        &kp RBKT   &kp BSLH     &kp GRAVE
    &trans     &none        &trans          &trans          &trans              &trans      &kp MINUS       &kp PLUS  &kp LBRC        &kp RBRC   &kp PIPE     &trans 
                             &trans &trans   &trans   &trans   &trans   &trans
                        >;
                };

                dota_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  (  |  )  |  *  | BKSP |
// | CTRL |     |     |     |     |     |   |  _  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  -  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
    &none     &kp Q       &kp W          &kp E    &kp R     &kp T      &kp CARET       &kp AMPS  &kp LPAR        &kp RPAR   &kp ASTERISK &trans 
    &none     &kp A       &kp S          &kp D    &kp F     &kp G      &kp UNDERSCORE  &kp EQUAL &kp LBKT        &kp RBKT   &kp BSLH     &kp GRAVE
    &none     &kp Z       &kp X          &kp C    &kp V     &kp B      &kp MINUS       &kp PLUS  &kp LBRC        &kp RBRC   &kp PIPE     &trans 
                             &kp Y &kp LEFT_ALT   &kp SPACE   &to 0   &trans   &trans
                        >;
                };
        };
};
